[{"C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\index.js":"1","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\App.js":"2","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\index.js":"3","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\Charts\\Charts.jsx":"4","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\AreaPicker\\AreaPicker.jsx":"5","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\StatCards\\StatCards.jsx":"6","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\api\\index.js":"7","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\Corona\\Corona.jsx":"8"},{"size":153,"mtime":1610987625962,"results":"9","hashOfConfig":"10"},{"size":1239,"mtime":1611035618589,"results":"11","hashOfConfig":"10"},{"size":227,"mtime":1611022026546,"results":"12","hashOfConfig":"10"},{"size":1752,"mtime":1611030910787,"results":"13","hashOfConfig":"10"},{"size":852,"mtime":1611020605259,"results":"14","hashOfConfig":"10"},{"size":2831,"mtime":1611034582763,"results":"15","hashOfConfig":"10"},{"size":1051,"mtime":1611018697114,"results":"16","hashOfConfig":"10"},{"size":23682,"mtime":1611035749374,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"9asy74",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\index.js",[],["38","39"],"C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\App.js",[],"C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\index.js",[],"C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\Charts\\Charts.jsx",["40","41"],"import React, {useState, useEffect} from \"react\";\r\nimport {fetchDaily} from '../../api';\r\nimport {Line, Bar, Doughnut} from 'react-chartjs-2'\r\nimport styles from './Charts.module.css'\r\n\r\nfunction Charts({data: {confirmed, recovered, deaths}, country}) {\r\n  const [dailyData, setDailyData] = useState({});\r\n  useEffect(async() => {\r\n    const fetchDailyData = async()=>{\r\n      setDailyData(await fetchDaily())\r\n    }\r\n    fetchDailyData()\r\n  }, [])\r\n\r\n  const line = (\r\n    dailyData.length ? (\r\n    <Line data={{\r\n      labels: dailyData.map(({date}) => date),\r\n      datasets: [\r\n        {\r\n          data: dailyData.map(({confirmed}) => confirmed),\r\n          label: 'Infected',\r\n          borderColor: 'red',\r\n          fill: true\r\n        },\r\n        {\r\n          data: dailyData.map(({deaths}) => deaths),\r\n          label: 'Deaths',\r\n          borderColor: 'black',\r\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n          fill: true\r\n        }\r\n      ],\r\n    }}/>) : null\r\n  );\r\n\r\n  console.log(confirmed,recovered,deaths)\r\n  const bar = (\r\n    confirmed \r\n    ? (\r\n      <Doughnut\r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [{\r\n          label: 'People',\r\n          backgroundColor: [\r\n            'rgba(240, 11, 11, 0.5)',\r\n            'rgba(173, 255, 47, 0.5)',\r\n            'rgba(0, 0, 0, 0.5)',\r\n          ],\r\n          hoverBackgroundColor: [\r\n            'rgba(120, 11, 11)',\r\n            'rgba(86, 255, 47)',\r\n            'rgba(0, 0, 0)',\r\n          ],\r\n          data:[confirmed.value,recovered.value,deaths.value]\r\n        }]\r\n      }} />\r\n    ) : null\r\n  )\r\n\r\n  return <div className={styles.container}>{country && country !== 'global'? bar: line}</div>\r\n}\r\n\r\nexport default Charts;\r\n","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\AreaPicker\\AreaPicker.jsx",[],"C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\StatCards\\StatCards.jsx",["42"],"import React from \"react\";\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './StatCards.module.css'\r\nimport cx from 'classnames'\r\nimport createMixins from \"@material-ui/core/styles/createMixins\";\r\nconst StatCards = ({data: {confirmed, deaths, recovered, lastUpdate}}) => {\r\n  console.log({lastUpdate});\r\n  if(!confirmed || !recovered || !deaths){\r\n    return 'Loading...'\r\n  }\r\n  console.log(confirmed.value)\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={1} justify=\"center\" direction=\"column\">\r\n        <Grid item component={Card} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" variant=\"h5\" gutterBottom className={cx(styles.typo)}>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n            /></Typography>\r\n            <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"subtitle2\" className={cx(styles.subtitle)}>Number of active cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" variant=\"h5\" gutterBottom className={cx(styles.typo)}>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                  start={0}\r\n                  end={recovered.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"subtitle2\" className={cx(styles.subtitle)}>Number of active cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" variant=\"h5\" gutterBottom className={cx(styles.typo)}>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n            <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n            />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"subtitle2\" className={cx(styles.subtitle)}>Number of active cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatCards;\r\n","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\api\\index.js",["43"],"import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n\r\nexport const fetchData = async(country) => {\r\n    let dynamicUrl = url + (country && country != 'global' ? `/countries/${country}` : '')\r\n    console.log('Changed URL', dynamicUrl)\r\n    try{\r\n        const {data: {confirmed, deaths, recovered, lastUpdate}} = await axios.get(dynamicUrl)\r\n        return {confirmed, deaths, recovered, lastUpdate}\r\n    }catch (error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async() => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const filteredData = data.map(day=>({\r\n            confirmed: day.confirmed.total,\r\n            deaths: day.deaths.total,\r\n            date: day.reportDate\r\n        }));\r\n\r\n        return filteredData\r\n    } catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const getCountries = async() => {\r\n    try{\r\n        const{data: {countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country)=> country.name)\r\n    }catch(error){\r\n\r\n    }\r\n}","C:\\Users\\minhn\\OneDrive\\Desktop\\projects\\covid19-tracker\\src\\components\\Corona\\Corona.jsx",["44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":3,"column":15,"nodeType":"52","messageId":"53","endLine":3,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":8,"column":13,"nodeType":"56","endLine":13,"endColumn":4},{"ruleId":"50","severity":1,"message":"57","line":6,"column":8,"nodeType":"52","messageId":"53","endLine":6,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":7,"column":48,"nodeType":"60","messageId":"61","endLine":7,"endColumn":50},{"ruleId":"50","severity":1,"message":"62","line":1,"column":16,"nodeType":"52","messageId":"53","endLine":1,"endColumn":22},{"ruleId":"50","severity":1,"message":"63","line":2,"column":9,"nodeType":"52","messageId":"53","endLine":2,"endColumn":17},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'createMixins' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'TweenMax' is defined but never used.","no-global-assign","no-unsafe-negation"]